// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  resumes           Resume[]
  interviewSessions InterviewSession[]
  voiceProfiles     VoiceProfile[]

  @@map("users")
}

model Resume {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  filename     String
  filePath     String   @map("file_path")
  originalText String   @map("original_text")
  parsedData   Json     @map("parsed_data")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviewSessions InterviewSession[]

  @@map("resumes")
}

model InterviewSession {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  resumeId    String    @map("resume_id")
  status      String    @default("pending")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  overallScore Float?   @map("overall_score")
  feedback    String?
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume    Resume              @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  questions InterviewQuestion[]

  @@map("interview_sessions")
}

model InterviewQuestion {
  id           String  @id @default(cuid())
  sessionId    String  @map("session_id")
  questionText String  @map("question_text")
  questionType String  @map("question_type")
  orderIndex   Int     @map("order_index")
  isRequired   Boolean @default(true) @map("is_required")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  session   InterviewSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  responses InterviewResponse[]

  @@map("interview_questions")
}

model InterviewResponse {
  id             String   @id @default(cuid())
  questionId     String   @map("question_id")
  responseText   String   @map("response_text")
  audioFilePath  String?  @map("audio_file_path")
  responseTimeMs Int      @map("response_time_ms")
  score          Float?
  feedback       String?
  aiEvaluation   Json?    @map("ai_evaluation")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  question InterviewQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("interview_responses")
}

model VoiceProfile {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  voiceId       String   @map("voice_id")
  voiceSettings Json     @map("voice_settings")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_profiles")
}